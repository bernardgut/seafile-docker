#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.5/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         172.88.0.1 local2

    pidfile     /var/run/haproxy.pid
    maxconn     4000
    tune.ssl.default-dh-param 2048

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
    option forwardfor       except 127.0.0.0/8
    bind *:8080
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
	acl host1	hdr_dom(host) -i hostname1
	acl host2	hdr_dom(host) -i hostname2
	acl host3	hdr_dom(host) -i hostname3
	acl host4	hdr_dom(host) -i seafile
	redirect scheme https	if host2 ! { ssl_fc }
	redirect scheme https	if host3 ! { ssl_fc }
	redirect scheme https	if host4 ! { ssl_fc }
	use_backend backend1 if host1
	default_backend             backend1



frontend fcssl
	bind localhost:4444 ssl crt /etc/haproxy/private
	acl fc_sni_host4		ssl_fc_sni -i seafile.thecshore.com
	acl path4 path_beg -i /seafhttp
	http-request set-path / if path4
	reqadd X-Forwarded-Proto:\ https
	use_backend backend4_fcssl if fc_sni_host4 ! path4
	use_backend backend4_fcssl_path if fc_sni_host4 path4



frontend ssl
	bind *:4443
        option tcplog
        mode tcp
        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }
	acl sni_host1		req_ssl_sni -i hostname1.thecshore.com
	acl sni_host2		req_ssl_sni -i hostname2.thecshore.com
	acl sni_host3		req_ssl_sni -i hostname3.thecshore.com
	acl sni_host4		req_ssl_sni -i seafile.thecshore.com
	use_backend backend1_ssl if sni_host1
	use_backend backend2_ssl if sni_host2
	use_backend backend3_ssl if sni_host3
	use_backend backend4_ssl if sni_host4


#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------

backend backend1
	balance roundrobin
        option forwardfor       except 127.0.0.0/8
	server host1_http1	hostname1-docker:8080 check


backend backend4_fcssl
	balance roundrobin
        option forwardfor       except 127.0.0.0/8
	server host4_fcssl1	seafile-docker:8000 check


backend backend4_fcssl_path
	balance roundrobin
        option forwardfor       except 127.0.0.0/8
	server host4_fcssl_path1	seafile-docker:8082 check


backend backend1_ssl
	balance roundrobin
	mode tcp
	server host1_ssl1	hostname1-docker:4443 check


backend backend2_ssl
	balance roundrobin
	mode tcp
	server host2_ssl1	hostname2-docker:4443 check


backend backend3_ssl
	balance roundrobin
	mode tcp
	server host3_ssl1	hostname3-docker:8888 check


backend backend4_ssl
	balance roundrobin
	mode tcp
	server host4_ssl1	localhost:4444 check
